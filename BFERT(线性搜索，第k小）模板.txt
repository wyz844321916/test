int BFERT(int l,int r,const int k);
int getindex(int l,int r);
int part(int l,int r,int pindex);
int insertsort(int l,int r);
int a[maxn];
int insertsort(int l,int r)
{
        int temp;
        int j;
        for(int i=l+1;i<=r;i++)
        {
                temp=a[i];
                j=i-1;
                while(j>=l&&a[j]>temp) {a[j+1]=a[j];--j;}
                a[j+1]=temp;
        }
        return ((r-l)/2)+l;
}
int getindex(int l,int r)
{
        if(r-l<5)
                return insertsort(l,r);
        int rr=l-1;
        for(int i=l;i+4<=r;i+=5)
        {
                int index=insertsort(i,i+4);
                swap(a[++rr],a[index]);
        }
        return  BFERT(l,rr,((rr-l+1)/2)+1);
}
int part(int l,int r,int pindex)
{
        swap(a[pindex],a[r]);
        int dindex=l;
        for(int i=l;i<r;i++)
        {
                if(a[i]<a[r])
                        swap(a[dindex++],a[i]);
        }
        swap(a[dindex],a[r]);
        return dindex;
}
int BFERT(int l,int r,const int k)
{
        int pindex=getindex(l,r);
        int dindex=part(l,r,pindex);
        int num=dindex-l+1;
        if(num==k) return dindex;
        else if(num>k) return BFERT(l,dindex-1,k);
        else return BFERT(dindex+1,r,k-num);
}