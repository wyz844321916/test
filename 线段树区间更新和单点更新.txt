/*原题2018多校1007
#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
//const ll mod=1e9+7;
const int maxn=100005;
const int inf=0x3f3f3f3f;
const ll INF=0x7f7f7f7f7f7f7f;
const int mod=998244353;
const double pi=acos(-1);
#define pii pair<int,int>
int a[4*maxn];  //最小值
int lazy[4*maxn];  //区间加减
int b[maxn];    
int pos[4*maxn];//最小值下标
int sum[4*maxn];//区间和
void build(int l,int r,int node)
{
        lazy[node]=0;
        if(l==r)
        {
                a[node]=b[l];
                sum[node]=0;
                pos[node]=l;
                return;
        }
        int mid=(l+r)>>1;
        build(l,mid,node<<1);
        build(mid+1,r,node<<1|1);
        if(a[node<<1]<a[node<<1|1])
        {
                a[node]=a[node<<1];
                pos[node]=pos[node<<1];
        }
        else
        {
                a[node]=a[node<<1|1];
                pos[node]=pos[node<<1|1];
        }
        sum[node]=sum[node<<1]+sum[node<<1|1];
}
void push_up(int node)
{
        if(a[node<<1]<a[node<<1|1])
        {
                a[node]=a[node<<1];
                pos[node]=pos[node<<1];
        }
        else
        {
                a[node]=a[node<<1|1];
                pos[node]=pos[node<<1|1];
        }
}
void push_down(int node)
{
        if(lazy[node])
        {
                lazy[node<<1]+=lazy[node];
                lazy[node<<1|1]+=lazy[node];
                a[node<<1]-=lazy[node];
                a[node<<1|1]-=lazy[node];
                lazy[node]=0;
        }
        return;
}
void update(int l,int r,int L,int R,int node)
{
        //cout<<lazy[node]<<' '<<a[node]<<' '<<L<<' '<<R<<endl;
        int mid=(L+R)>>1;
        if(l==L&&r==R)
        {
                a[node]--;
                lazy[node]++;
                return;
        }
        if(L==R) return;
        push_down(node);
        if(r<=mid)
        update(l,r,L,mid,node<<1);
        else if(l>mid)
        update(l,r,mid+1,R,node<<1|1);
        else
        {
                update(l,mid,L,mid,node<<1);
                update(mid+1,r,mid+1,R,node<<1|1);
        }
        push_up(node);
}
void complete(int p,int L,int R,int node)
{
        int mid=(L+R)>>1;
        if(L==p&&R==p)
        {
                a[node]=b[p];
                sum[node]++;
                return;
        }
        push_down(node);
        if(mid>=p)
                complete(p,L,mid,node<<1);
        else if(mid<p)
        {
                complete(p,mid+1,R,node<<1|1);
        }
        if(a[node<<1]<a[node<<1|1])
        {
                a[node]=a[node<<1];
                pos[node]=pos[node<<1];
        }
        else
        {
                a[node]=a[node<<1|1];
                pos[node]=pos[node<<1|1];
        }
        sum[node]=sum[node<<1]+sum[node<<1|1];
        lazy[node]=0;
}
int query(int l,int r,int L,int R,int node)
{
        //cout<<L<<' '<<R<<endl;
        int mid=(L+R)>>1;
        if(l==L&&r==R)
        {
                return sum[node];
        }
        int res=0;
        if(r<=mid)
        res+=query(l,r,L,mid,node<<1);
        else if(l>mid)
        res+=query(l,r,mid+1,R,node<<1|1);
        else
        {
                res+=query(l,mid,L,mid,node<<1);
                res+=query(mid+1,r,mid+1,R,node<<1|1);
        }
        return res;
}
int main()
{
        int n,q;
        while(~scanf("%d%d",&n,&q))
        {
                for(int i=1;i<=n;i++)
                {
                        scanf("%d",&b[i]);
                }
                build(1,n,1);
                while(q--)
                {
                        char str[15];
                        scanf("%s",str);
                        int l,r;
                        if(strcmp(str,"query")==0)
                        {
                                scanf("%d%d",&l,&r);
                                int res=query(l,r,1,n,1);
                                printf("%d\n",res);
                        }
                        else if(strcmp(str,"add")==0)
                        {
                                scanf("%d%d",&l,&r);
                                update(l,r,1,n,1);
                                //cout<<a[1]<<endl
                                while(a[1]==0)
                                {
                                        complete(pos[1],1,n,1);
                                }
                                //cout<<sum[1]<<endl;
                                //cout<<a[1]<<endl;
                                //cout<<sum[1]<<endl;
                        }
                }
        }
        return 0;
}
